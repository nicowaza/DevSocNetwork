{"version":3,"sources":["webpack:///webpack/bootstrap 5806381d6e84706c716d","webpack:///external \"dotenv/config\"","webpack:///external \"mongoose\"","webpack:///./src/index.js","webpack:///external \"express\"","webpack:///./src/config/db.js"],"names":["app","express","connect","get","req","res","send","port","process","env","PORT","listen","console","log","DBUrl","mongoose","Promise","global","useNewUrlParser","db","connection","on","error","bind","once"],"mappings":";;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA,0C;;;;;;ACAA,qC;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA,MAAMA,MAAM,+CAAAC,EAAZ;AACA;AACA;AACA;;AAIA,mEAAAC;;AAGAF,IAAIG,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAcA,IAAIC,IAAJ,CAAS,IAAT,CAA3B;;AAEA,MAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEAV,IAAIW,MAAJ,CAAWJ,IAAX,EAAiB,MAAMK,QAAQC,GAAR,CAAa,6BAA4BN,IAAK,EAA9C,CAAvB,E;;;;;;ACfA,oC;;;;;;;;;;;ACAA;AACA;AACA,MAAM;AACJO;AADI,IAEFN,QAAQC,GAFZ;;AAKA,gDAAAM,CAASC,OAAT,GAAmBC,OAAOD,OAA1B;;AAEO,MAAMd,UAAU,MAAM,gDAAAa,CAASb,OAAT,CAAkBY,KAAlB,EAA0B;AACrDI,mBAAiB;AADoC,CAA1B,CAAtB;AAAA;AAAA;;AAIP,IAAIC,KAAK,gDAAAJ,CAASK,UAAlB;;AAEAD,GAAGE,EAAH,CAAM,OAAN,EAAeT,QAAQU,KAAR,CAAcC,IAAd,CAAmBX,OAAnB,EAA4B,mBAA5B,CAAf;;AAEAO,GAAGK,IAAH,CAAQ,MAAR,EAAgB,YAAY;AAC1BZ,UAAQC,GAAR,CAAY,sBAAZ;AACD,CAFD,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5806381d6e84706c716d","module.exports = require(\"dotenv/config\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv/config\"\n// module id = 0\n// module chunks = 0","module.exports = require(\"mongoose\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mongoose\"\n// module id = 1\n// module chunks = 0","import express from 'express';\nconst app = express();\nimport 'dotenv/config'\nimport mongoose from 'mongoose'\nimport {\n  connect\n} from './config/db'\n\nconnect()\n\n\napp.get(\"/\", (req, res) => res.send('hi'));\n\nconst port = process.env.PORT || 5000\n\napp.listen(port, () => console.log(`server is running on port ${port}`))\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 4\n// module chunks = 0","import mongoose from 'mongoose'\nimport 'dotenv/config'\nconst {\n  DBUrl\n} = process.env\n\n\nmongoose.Promise = global.Promise;\n\nexport const connect = () => mongoose.connect((DBUrl), {\n  useNewUrlParser: true\n})\n\nlet db = mongoose.connection;\n\ndb.on('error', console.error.bind(console, 'connection error:'));\n\ndb.once('open', function () {\n  console.log('Connect√© a MongoDB !')\n});\n\n\n// WEBPACK FOOTER //\n// ./src/config/db.js"],"sourceRoot":""}